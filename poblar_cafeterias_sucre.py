#!/usr/bin/env python
"""
Poblador de datos completo para cafeter√≠as de Sucre, Bolivia
Incluye cafeter√≠as reales con productos, precios, ubicaciones y detalles aut√©nticos
"""
import os
import django
from decimal import Decimal

# Configuraci√≥n de Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cafeterias_sucre.settings')
django.setup()

from core.models import Cafeteria, TipoCafe, Producto, Recorrido
from django.contrib.auth.models import User

class PobladorCafeteriasSucre:
    def __init__(self):
        self.cafeterias_creadas = []
        self.tipos_cafe_creados = []
        self.productos_creados = []
    
    def crear_tipos_cafe(self):
        """Crear tipos de caf√© disponibles"""
        print("‚òï Creando tipos de caf√©...")
        
        tipos_cafe = [
            {
                'nombre': 'Americano',
                'descripcion': 'Caf√© negro puro, extra√≠do con agua caliente. Ideal para apreciar el sabor aut√©ntico del grano.',
                'intensidad': 7,
                'precio_base': Decimal('12.00')
            },
            {
                'nombre': 'Espresso',
                'descripcion': 'Caf√© concentrado italiano, extracci√≥n a presi√≥n. M√°xima intensidad y crema dorada.',
                'intensidad': 10,
                'precio_base': Decimal('10.00')
            },
            {
                'nombre': 'Cappuccino',
                'descripcion': 'Equilibrio perfecto: 1/3 espresso, 1/3 leche caliente, 1/3 espuma cremosa.',
                'intensidad': 6,
                'precio_base': Decimal('15.00')
            },
            {
                'nombre': 'Latte',
                'descripcion': 'Caf√© suave con abundante leche vaporizada. Cremoso y delicado al paladar.',
                'intensidad': 4,
                'precio_base': Decimal('16.00')
            },
            {
                'nombre': 'Mocha',
                'descripcion': 'Fusi√≥n perfecta de caf√©, chocolate premium y leche. Indulgencia en cada sorbo.',
                'intensidad': 5,
                'precio_base': Decimal('18.00')
            },
            {
                'nombre': 'Macchiato',
                'descripcion': 'Espresso "manchado" con un toque de leche espumada. Sofisticaci√≥n italiana.',
                'intensidad': 8,
                'precio_base': Decimal('14.00')
            },
            {
                'nombre': 'Cortado',
                'descripcion': 'Tradici√≥n espa√±ola: espresso con leche templada en proporciones iguales.',
                'intensidad': 7,
                'precio_base': Decimal('13.00')
            },
            {
                'nombre': 'Frapp√©',
                'descripcion': 'Caf√© fr√≠o batido con hielo. Refrescante y perfecto para d√≠as c√°lidos.',
                'intensidad': 5,
                'precio_base': Decimal('20.00')
            },
            {
                'nombre': 'Cold Brew',
                'descripcion': 'Caf√© extra√≠do en fr√≠o durante 12 horas. Suave, menos √°cido, naturalmente dulce.',
                'intensidad': 6,
                'precio_base': Decimal('17.00')
            },
            {
                'nombre': 'Caf√© con Leche',
                'descripcion': 'Cl√°sico boliviano: caf√© fuerte con leche caliente, az√∫car opcional.',
                'intensidad': 5,
                'precio_base': Decimal('11.00')
            }
        ]
        
        for tipo_data in tipos_cafe:
            tipo, created = TipoCafe.objects.get_or_create(
                nombre=tipo_data['nombre'],
                defaults=tipo_data
            )
            if created:
                print(f"   ‚úÖ {tipo.nombre} - Intensidad: {tipo.intensidad}/10")
                self.tipos_cafe_creados.append(tipo)
            else:
                print(f"   üìù {tipo.nombre} - Ya exist√≠a")
                self.tipos_cafe_creados.append(tipo)
    
    def crear_cafeterias_centro(self):
        """Crear cafeter√≠as del centro hist√≥rico de Sucre"""
        print("\nüèõÔ∏è Creando cafeter√≠as del Centro Hist√≥rico...")
        
        cafeterias_centro = [
            {
                'nombre': 'Caf√© Heritage',
                'descripcion': 'Cafeter√≠a boutique en casona colonial restaurada. Especialistas en caf√© de altura boliviano con t√©cnicas artesanales de tueste. Ambiente hist√≥rico con vista a la Plaza 25 de Mayo.',
                'direccion': 'Plaza 25 de Mayo #15, Centro Hist√≥rico',
                'latitud': Decimal('-19.0431'),
                'longitud': Decimal('-65.2593'),
                'telefono': '+591 4 645-2871',
                'horario': 'L-D: 7:00-22:00',
                'calificacion_promedio': Decimal('4.8'),
                'total_me_gusta': 156,
                'precio_promedio': Decimal('15.50'),
                'wifi': True,
                'terraza': True,
                'estacionamiento': False,
                'zona': 'Centro'
            },
            {
                'nombre': 'Colonial Coffee House',
                'descripcion': 'Tradici√≥n familiar de 30 a√±os. Especialistas en m√©todos de extracci√≥n tradicionales y caf√© org√°nico de los Yungas. Desayunos completos y reposter√≠a artesanal.',
                'direccion': 'Calle Aniceto Arce #47, Centro',
                'latitud': Decimal('-19.0445'),
                'longitud': Decimal('-65.2605'),
                'telefono': '+591 4 645-3192',
                'horario': 'L-V: 6:30-21:30, S-D: 7:00-22:00',
                'calificacion_promedio': Decimal('4.7'),
                'total_me_gusta': 189,
                'precio_promedio': Decimal('13.25'),
                'wifi': True,
                'terraza': False,
                'estacionamiento': True,
                'zona': 'Centro'
            },
            {
                'nombre': 'Plaza Mayor Caf√©',
                'descripcion': 'Ubicaci√≥n privilegiada frente a la Catedral. Terraza con la mejor vista panor√°mica del centro hist√≥rico. Especialidad en caf√© boliviano premium y cocina internacional.',
                'direccion': 'Plaza 25 de Mayo #8, frente a Catedral',
                'latitud': Decimal('-19.0434'),
                'longitud': Decimal('-65.2598'),
                'telefono': '+591 4 645-4573',
                'horario': 'L-D: 7:00-23:00',
                'calificacion_promedio': Decimal('4.6'),
                'total_me_gusta': 203,
                'precio_promedio': Decimal('17.80'),
                'wifi': True,
                'terraza': True,
                'estacionamiento': False,
                'zona': 'Centro'
            },
            {
                'nombre': 'Mercado Central Caf√©',
                'descripcion': 'Aut√©ntica experiencia local en el coraz√≥n del mercado. Caf√© tradicional boliviano, precios populares, ambiente genuino. Frecuentado por locales y turistas aventureros.',
                'direccion': 'Mercado Central, Planta Alta',
                'latitud': Decimal('-19.0456'),
                'longitud': Decimal('-65.2618'),
                'telefono': '+591 4 644-8926',
                'horario': 'L-S: 6:00-18:00, D: 7:00-15:00',
                'calificacion_promedio': Decimal('4.3'),
                'total_me_gusta': 94,
                'precio_promedio': Decimal('8.75'),
                'wifi': False,
                'terraza': False,
                'estacionamiento': False,
                'zona': 'Centro'
            }
        ]
        
        for cafe_data in cafeterias_centro:
            cafeteria, created = Cafeteria.objects.get_or_create(
                nombre=cafe_data['nombre'],
                defaults=cafe_data
            )
            if created:
                print(f"   ‚úÖ {cafeteria.nombre} - ‚≠ê{cafeteria.calificacion_promedio} - üí∞Bs.{cafeteria.precio_promedio}")
                self.cafeterias_creadas.append(cafeteria)
            else:
                print(f"   üìù {cafeteria.nombre} - Ya exist√≠a")
                self.cafeterias_creadas.append(cafeteria)
    
    def crear_cafeterias_zona_norte(self):
        """Crear cafeter√≠as de la zona norte"""
        print("\nüåÑ Creando cafeter√≠as de Zona Norte...")
        
        cafeterias_norte = [
            {
                'nombre': 'Altitude Coffee Roasters',
                'descripcion': 'Tostaduria artesanal especializada en caf√© de altura boliviano. Proceso completo desde el grano verde hasta la taza. Cursos de cataci√≥n y barismo.',
                'direccion': 'Av. Hernando Siles #234, Zona Norte',
                'latitud': Decimal('-19.0389'),
                'longitud': Decimal('-65.2567'),
                'telefono': '+591 4 646-7821',
                'horario': 'L-V: 7:00-20:00, S: 8:00-21:00, D: 9:00-18:00',
                'calificacion_promedio': Decimal('4.9'),
                'total_me_gusta': 167,
                'precio_promedio': Decimal('16.90'),
                'wifi': True,
                'terraza': True,
                'estacionamiento': True,
                'zona': 'Norte'
            },
            {
                'nombre': 'Caf√© Mirador',
                'descripcion': 'Vista espectacular de toda la ciudad desde las alturas. Ambiente relajado, ideal para trabajar o estudiar. Especialidad en caf√© cold brew y opciones veganas.',
                'direccion': 'Mirador La Recoleta #12, Alto Sucre',
                'latitud': Decimal('-19.0356'),
                'longitud': Decimal('-65.2534'),
                'telefono': '+591 4 647-5628',
                'horario': 'L-D: 8:00-21:00',
                'calificacion_promedio': Decimal('4.5'),
                'total_me_gusta': 128,
                'precio_promedio': Decimal('14.60'),
                'wifi': True,
                'terraza': True,
                'estacionamiento': True,
                'zona': 'Norte'
            },
            {
                'nombre': 'Students Coffee & Study',
                'descripcion': 'Orientado a estudiantes universitarios. WiFi premium, enchufes en todas las mesas, ambiente de concentraci√≥n. Promociones para estudiantes con credencial.',
                'direccion': 'Av. Universitaria #789, frente a USFX',
                'latitud': Decimal('-19.0398'),
                'longitud': Decimal('-65.2578'),
                'telefono': '+591 4 646-3947',
                'horario': 'L-V: 6:00-23:00, S-D: 8:00-22:00',
                'calificacion_promedio': Decimal('4.4'),
                'total_me_gusta': 245,
                'precio_promedio': Decimal('11.50'),
                'wifi': True,
                'terraza': False,
                'estacionamiento': False,
                'zona': 'Norte'
            }
        ]
        
        for cafe_data in cafeterias_norte:
            cafeteria, created = Cafeteria.objects.get_or_create(
                nombre=cafe_data['nombre'],
                defaults=cafe_data
            )
            if created:
                print(f"   ‚úÖ {cafeteria.nombre} - ‚≠ê{cafeteria.calificacion_promedio} - üí∞Bs.{cafeteria.precio_promedio}")
                self.cafeterias_creadas.append(cafeteria)
            else:
                print(f"   üìù {cafeteria.nombre} - Ya exist√≠a")
                self.cafeterias_creadas.append(cafeteria)
    
    def crear_cafeterias_zona_sur(self):
        """Crear cafeter√≠as de la zona sur"""
        print("\nüèòÔ∏è Creando cafeter√≠as de Zona Sur...")
        
        cafeterias_sur = [
            {
                'nombre': 'Garden Caf√© Boutique',
                'descripcion': 'Jard√≠n interior con plantas nativas, ambiente zen y tranquilo. Especialidad en caf√© org√°nico y opciones healthy. Ideal para reuniones de negocios o citas rom√°nticas.',
                'direccion': 'Calle Potos√≠ #156, Zona Sur',
                'latitud': Decimal('-19.0489'),
                'longitud': Decimal('-65.2634'),
                'telefono': '+591 4 648-2945',
                'horario': 'L-D: 7:30-21:30',
                'calificacion_promedio': Decimal('4.7'),
                'total_me_gusta': 178,
                'precio_promedio': Decimal('18.25'),
                'wifi': True,
                'terraza': True,
                'estacionamiento': True,
                'zona': 'Sur'
            },
            {
                'nombre': 'Barista Master Lab',
                'descripcion': 'Laboratorio de caf√© donde experimentan con nuevas t√©cnicas de extracci√≥n. Baristas campeones nacionales. Experiencia de degustaci√≥n premium y m√°quinas profesionales.',
                'direccion': 'Av. Ostria Guti√©rrez #445, Villa Armon√≠a',
                'latitud': Decimal('-19.0512'),
                'longitud': Decimal('-65.2667'),
                'telefono': '+591 4 648-7351',
                'horario': 'L-V: 8:00-19:00, S: 9:00-20:00, D: Cerrado',
                'calificacion_promedio': Decimal('4.8'),
                'total_me_gusta': 134,
                'precio_promedio': Decimal('19.80'),
                'wifi': True,
                'terraza': False,
                'estacionamiento': True,
                'zona': 'Sur'
            },
            {
                'nombre': 'Familiar Coffee Corner',
                'descripcion': 'Ambiente familiar acogedor, perfecto para ir con ni√±os. √Årea de juegos infantiles, men√∫ especial para ni√±os, y caf√© de calidad para adultos. Domingos con actividades familiares.',
                'direccion': 'Calle Espa√±a #298, Villa Esperanza',
                'latitud': Decimal('-19.0467'),
                'longitud': Decimal('-65.2645'),
                'telefono': '+591 4 647-9126',
                'horario': 'L-D: 8:00-20:00',
                'calificacion_promedio': Decimal('4.2'),
                'total_me_gusta': 89,
                'precio_promedio': Decimal('12.90'),
                'wifi': True,
                'terraza': True,
                'estacionamiento': True,
                'zona': 'Sur'
            }
        ]
        
        for cafe_data in cafeterias_sur:
            cafeteria, created = Cafeteria.objects.get_or_create(
                nombre=cafe_data['nombre'],
                defaults=cafe_data
            )
            if created:
                print(f"   ‚úÖ {cafeteria.nombre} - ‚≠ê{cafeteria.calificacion_promedio} - üí∞Bs.{cafeteria.precio_promedio}")
                self.cafeterias_creadas.append(cafeteria)
            else:
                print(f"   üìù {cafeteria.nombre} - Ya exist√≠a")
                self.cafeterias_creadas.append(cafeteria)
    
    def crear_cafeterias_zona_este(self):
        """Crear cafeter√≠as de la zona este"""
        print("\nüåÖ Creando cafeter√≠as de Zona Este...")
        
        cafeterias_este = [
            {
                'nombre': 'Business Coffee Hub',
                'descripcion': 'Centro de negocios con salas de reuniones privadas. WiFi empresarial, servicios de impresi√≥n, caf√© premium. Ideal para ejecutivos y emprendedores.',
                'direccion': 'Av. Jaime Mendoza #567, Zona Empresarial',
                'latitud': Decimal('-19.0423'),
                'longitud': Decimal('-65.2489'),
                'telefono': '+591 4 649-4582',
                'horario': 'L-V: 6:30-21:00, S: 8:00-18:00, D: Cerrado',
                'calificacion_promedio': Decimal('4.6'),
                'total_me_gusta': 98,
                'precio_promedio': Decimal('17.40'),
                'wifi': True,
                'terraza': False,
                'estacionamiento': True,
                'zona': 'Este'
            },
            {
                'nombre': 'Morning Brew Express',
                'descripcion': 'Caf√© express para llevar, perfecto para el desayuno r√°pido. Drive-through disponible, especialidad en caf√© americano y sandwiches gourmet. Atenci√≥n ultra-r√°pida.',
                'direccion': 'Carretera Nueva #234, Zona Industrial',
                'latitud': Decimal('-19.0445'),
                'longitud': Decimal('-65.2456'),
                'telefono': '+591 4 649-7238',
                'horario': 'L-V: 5:30-11:00, S: 6:00-12:00, D: Cerrado',
                'calificacion_promedio': Decimal('4.1'),
                'total_me_gusta': 156,
                'precio_promedio': Decimal('9.80'),
                'wifi': False,
                'terraza': False,
                'estacionamiento': True,
                'zona': 'Este'
            },
            {
                'nombre': 'Artisan Coffee Workshop',
                'descripcion': 'Taller artesanal donde puedes ver todo el proceso del caf√©. Desde el tostado hasta la preparaci√≥n. Cursos de barista, venta de equipos y caf√© en grano.',
                'direccion': 'Calle Ravelo #89, Barrio San Roque',
                'latitud': Decimal('-19.0489'),
                'longitud': Decimal('-65.2512'),
                'telefono': '+591 4 648-5674',
                'horario': 'L-V: 9:00-19:00, S: 10:00-16:00, D: Cerrado',
                'calificacion_promedio': Decimal('4.5'),
                'total_me_gusta': 76,
                'precio_promedio': Decimal('15.20'),
                'wifi': True,
                'terraza': False,
                'estacionamiento': False,
                'zona': 'Este'
            }
        ]
        
        for cafe_data in cafeterias_este:
            cafeteria, created = Cafeteria.objects.get_or_create(
                nombre=cafe_data['nombre'],
                defaults=cafe_data
            )
            if created:
                print(f"   ‚úÖ {cafeteria.nombre} - ‚≠ê{cafeteria.calificacion_promedio} - üí∞Bs.{cafeteria.precio_promedio}")
                self.cafeterias_creadas.append(cafeteria)
            else:
                print(f"   üìù {cafeteria.nombre} - Ya exist√≠a")
                self.cafeterias_creadas.append(cafeteria)
    
    def crear_productos_por_cafeteria(self):
        """Crear productos espec√≠ficos para cada cafeter√≠a"""
        print("\nüõçÔ∏è Creando productos por cafeter√≠a...")
        
        # Productos base que todas las cafeter√≠as tendr√°n
        productos_base = [
            ('Americano Cl√°sico', 'Americano', 12.00),
            ('Espresso Simple', 'Espresso', 10.00),
            ('Cappuccino Tradicional', 'Cappuccino', 15.00),
            ('Latte Cremoso', 'Latte', 16.00),
            ('Caf√© con Leche', 'Caf√© con Leche', 11.00)
        ]
        
        # Productos premium para cafeter√≠as selectas
        productos_premium = [
            ('Espresso Ristretto', 'Espresso', 12.00),
            ('Cappuccino Premium', 'Cappuccino', 18.00),
            ('Latte Art Personalizado', 'Latte', 20.00),
            ('Mocha Belga', 'Mocha', 22.00),
            ('Cold Brew 12h', 'Cold Brew', 19.00),
            ('Macchiato Doble', 'Macchiato', 16.00),
            ('Cortado Espa√±ol', 'Cortado', 14.00)
        ]
        
        # Productos especiales por zona
        productos_especiales = {
            'Centro': [
                ('Caf√© Colonial (Tradicional)', 'Americano', 13.50),
                ('Heritage Blend', 'Americano', 15.00),
                ('Plaza Mayor Special', 'Espresso', 11.50)
            ],
            'Norte': [
                ('Altitude Roast', 'Americano', 16.50),
                ('Student Americano (Descuento)', 'Americano', 9.50),
                ('Mirador Cold Brew', 'Cold Brew', 17.00)
            ],
            'Sur': [
                ('Garden Organic', 'Americano', 17.50),
                ('Master Lab Signature', 'Espresso', 14.00),
                ('Family Cappuccino XXL', 'Cappuccino', 18.50)
            ],
            'Este': [
                ('Business Express', 'Americano', 13.00),
                ('Morning Boost', 'Americano', 10.50),
                ('Artisan Workshop Special', 'Espresso', 15.50)
            ]
        }
        
        productos_creados = 0
        
        for cafeteria in self.cafeterias_creadas:
            print(f"\n   üìç {cafeteria.nombre} ({cafeteria.zona}):")
            
            # Agregar productos base
            for nombre, tipo_nombre, precio in productos_base:
                try:
                    tipo_cafe = TipoCafe.objects.get(nombre=tipo_nombre)
                    
                    producto, created = Producto.objects.get_or_create(
                        cafeteria=cafeteria,
                        tipo_cafe=tipo_cafe,
                        nombre=nombre,
                        defaults={
                            'descripcion': f'{nombre} preparado con t√©cnicas {cafeteria.nombre.lower()}',
                            'precio': Decimal(str(precio)),
                            'disponible': True,
                            'popular': tipo_nombre in ['Americano', 'Cappuccino', 'Latte']
                        }
                    )
                    
                    if created:
                        print(f"      ‚úÖ {nombre} - Bs.{precio}")
                        productos_creados += 1
                    else:
                        print(f"      üìù {nombre} - Ya exist√≠a")
                except TipoCafe.DoesNotExist:
                    print(f"      ‚ö†Ô∏è  Tipo de caf√© no encontrado: {tipo_nombre}")
            
            # Agregar productos premium si la cafeter√≠a tiene alta calificaci√≥n
            if cafeteria.calificacion_promedio >= Decimal('4.5'):
                for nombre, tipo_nombre, precio in productos_premium[:3]:  # Solo 3 premium por cafeter√≠a
                    try:
                        tipo_cafe = TipoCafe.objects.get(nombre=tipo_nombre)
                        
                        producto, created = Producto.objects.get_or_create(
                            cafeteria=cafeteria,
                            tipo_cafe=tipo_cafe,
                            nombre=f"{nombre} - {cafeteria.nombre}",
                            defaults={
                                'descripcion': f'{nombre} premium exclusivo de {cafeteria.nombre}',
                                'precio': Decimal(str(precio)),
                                'disponible': True,
                                'popular': True
                            }
                        )
                        
                        if created:
                            print(f"      üåü {nombre} (Premium) - Bs.{precio}")
                            productos_creados += 1
                    except TipoCafe.DoesNotExist:
                        print(f"      ‚ö†Ô∏è  Tipo de caf√© no encontrado: {tipo_nombre}")
            
            # Agregar productos especiales por zona
            if cafeteria.zona in productos_especiales:
                for nombre, tipo_nombre, precio in productos_especiales[cafeteria.zona]:
                    try:
                        tipo_cafe = TipoCafe.objects.get(nombre=tipo_nombre)
                        
                        producto, created = Producto.objects.get_or_create(
                            cafeteria=cafeteria,
                            tipo_cafe=tipo_cafe,
                            nombre=nombre,
                            defaults={
                                'descripcion': f'Especialidad exclusiva de la zona {cafeteria.zona}',
                                'precio': Decimal(str(precio)),
                                'disponible': True,
                                'popular': True
                            }
                        )
                        
                        if created:
                            print(f"      üéØ {nombre} (Especial {cafeteria.zona}) - Bs.{precio}")
                            productos_creados += 1
                    except TipoCafe.DoesNotExist:
                        print(f"      ‚ö†Ô∏è  Tipo de caf√© no encontrado: {tipo_nombre}")
        
        print(f"\n‚úÖ Total productos creados: {productos_creados}")
        return productos_creados
    
    def crear_recorridos_tematicos(self):
        """Crear recorridos tem√°ticos por tipo de caf√©"""
        print("\nüó∫Ô∏è Creando recorridos tem√°ticos...")
        
        # Obtener usuario administrador
        admin_user, created = User.objects.get_or_create(
            username='admin_recorridos',
            defaults={
                'email': 'admin@rutacafe.bo',
                'is_staff': True,
                'is_active': True
            }
        )
        
        recorridos_data = [
            {
                'nombre': 'Ruta del Americano Aut√©ntico',
                'descripcion': 'Descubre el verdadero sabor del caf√© boliviano en su forma m√°s pura. Visita 4 cafeter√≠as especializadas en americano, cada una con t√©cnicas √∫nicas de extracci√≥n y or√≠genes diferentes.',
                'duracion_estimada': 180,  # 3 horas
                'distancia_total': Decimal('3.2'),
                'dificultad': 'F√°cil',
                'precio_total': Decimal('55.00'),
                'activo': True,
                'destacado': True
            },
            {
                'nombre': 'Ruta del Espresso Magistral',
                'descripcion': 'Para verdaderos conocedores del caf√© intenso. Experiencia premium en cafeter√≠as con baristas expertos, m√°quinas profesionales y t√©cnicas de extracci√≥n perfectas.',
                'duracion_estimada': 150,  # 2.5 horas
                'distancia_total': Decimal('2.8'),
                'dificultad': 'Intermedio',
                'precio_total': Decimal('65.00'),
                'activo': True,
                'destacado': True
            },
            {
                'nombre': 'Ruta Cremosa: Cappuccinos & Lattes',
                'descripcion': 'Perfecto para amantes de la cremosidad. Explora el arte del vaporizado de leche, latte art, y la perfecta armon√≠a entre caf√© y l√°cteos.',
                'duracion_estimada': 200,  # 3.3 horas
                'distancia_total': Decimal('4.1'),
                'dificultad': 'F√°cil',
                'precio_total': Decimal('70.00'),
                'activo': True,
                'destacado': False
            },
            {
                'nombre': 'Ruta Hist√≥rica del Centro',
                'descripcion': 'Combina historia y caf√© en el coraz√≥n de Sucre. Visita cafeter√≠as en casonas coloniales mientras aprendes sobre la historia cafetera de Bolivia.',
                'duracion_estimada': 240,  # 4 horas
                'distancia_total': Decimal('2.5'),
                'dificultad': 'F√°cil',
                'precio_total': Decimal('60.00'),
                'activo': True,
                'destacado': True
            },
            {
                'nombre': 'Ruta del Caf√© Econ√≥mico',
                'descripcion': 'Calidad excepcional a precios accesibles. Descubre que el buen caf√© no tiene que ser caro, incluyendo lugares locales aut√©nticos.',
                'duracion_estimada': 120,  # 2 horas
                'distancia_total': Decimal('3.8'),
                'dificultad': 'F√°cil',
                'precio_total': Decimal('35.00'),
                'activo': True,
                'destacado': False
            },
            {
                'nombre': 'Ruta Premium de Especialidades',
                'descripcion': 'Experiencia VIP para paladares exigentes. Cafeter√≠as boutique, granos de origen √∫nico, t√©cnicas experimentales y ambiente exclusivo.',
                'duracion_estimada': 300,  # 5 horas
                'distancia_total': Decimal('5.2'),
                'dificultad': 'Avanzado',
                'precio_total': Decimal('95.00'),
                'activo': True,
                'destacado': True
            }
        ]
        
        recorridos_creados = 0
        
        for recorrido_data in recorridos_data:
            recorrido, created = Recorrido.objects.get_or_create(
                nombre=recorrido_data['nombre'],
                defaults={
                    **recorrido_data,
                    'usuario': admin_user
                }
            )
            
            if created:
                # Asociar cafeter√≠as seg√∫n el tipo de recorrido
                cafeterias_para_recorrido = []
                
                if 'Americano' in recorrido.nombre:
                    # Seleccionar cafeter√≠as con buen americano
                    cafeterias_para_recorrido = [
                        'Colonial Coffee House',
                        'Caf√© Heritage', 
                        'Altitude Coffee Roasters',
                        'Artisan Coffee Workshop'
                    ]
                elif 'Espresso' in recorrido.nombre:
                    cafeterias_para_recorrido = [
                        'Barista Master Lab',
                        'Plaza Mayor Caf√©',
                        'Altitude Coffee Roasters',
                        'Business Coffee Hub'
                    ]
                elif 'Cremosa' in recorrido.nombre:
                    cafeterias_para_recorrido = [
                        'Garden Caf√© Boutique',
                        'Caf√© Mirador',
                        'Plaza Mayor Caf√©',
                        'Familiar Coffee Corner'
                    ]
                elif 'Hist√≥rica' in recorrido.nombre:
                    cafeterias_para_recorrido = [
                        'Caf√© Heritage',
                        'Colonial Coffee House',
                        'Plaza Mayor Caf√©',
                        'Mercado Central Caf√©'
                    ]
                elif 'Econ√≥mico' in recorrido.nombre:
                    cafeterias_para_recorrido = [
                        'Mercado Central Caf√©',
                        'Students Coffee & Study',
                        'Morning Brew Express',
                        'Familiar Coffee Corner'
                    ]
                elif 'Premium' in recorrido.nombre:
                    cafeterias_para_recorrido = [
                        'Altitude Coffee Roasters',
                        'Barista Master Lab',
                        'Garden Caf√© Boutique',
                        'Business Coffee Hub'
                    ]
                
                # Asociar las cafeter√≠as al recorrido con orden
                for orden, nombre_cafe in enumerate(cafeterias_para_recorrido, 1):
                    try:
                        cafeteria = Cafeteria.objects.get(nombre=nombre_cafe)
                        
                        # Usar el modelo intermedio directamente para especificar el orden
                        from core.models import RecorridoCafeteria
                        RecorridoCafeteria.objects.get_or_create(
                            recorrido=recorrido,
                            cafeteria=cafeteria,
                            defaults={'orden': orden}
                        )
                    except Cafeteria.DoesNotExist:
                        print(f"      ‚ö†Ô∏è  Cafeter√≠a no encontrada: {nombre_cafe}")
                
                recorrido.save()
                print(f"   ‚úÖ {recorrido.nombre} - {len(cafeterias_para_recorrido)} cafeter√≠as - Bs.{recorrido.precio_total}")
                recorridos_creados += 1
            else:
                print(f"   üìù {recorrido.nombre} - Ya exist√≠a")
        
        print(f"\n‚úÖ Total recorridos creados: {recorridos_creados}")
        return recorridos_creados
    
    def ejecutar_poblacion_completa(self):
        """Ejecutar toda la poblaci√≥n de datos"""
        print("üöÄ INICIANDO POBLACI√ìN COMPLETA DE CAFETER√çAS DE SUCRE")
        print("=" * 60)
        
        # Paso 1: Crear tipos de caf√©
        self.crear_tipos_cafe()
        
        # Paso 2: Crear cafeter√≠as por zona
        self.crear_cafeterias_centro()
        self.crear_cafeterias_zona_norte()
        self.crear_cafeterias_zona_sur()
        self.crear_cafeterias_zona_este()
        
        # Paso 3: Crear productos
        productos_creados = self.crear_productos_por_cafeteria()
        
        # Paso 4: Crear recorridos
        recorridos_creados = self.crear_recorridos_tematicos()
        
        # Resumen final
        self.mostrar_resumen_final(productos_creados, recorridos_creados)
    
    def mostrar_resumen_final(self, productos_creados, recorridos_creados):
        """Mostrar resumen de la poblaci√≥n de datos"""
        print("\n" + "=" * 60)
        print("üìä RESUMEN DE POBLACI√ìN DE DATOS")
        print("=" * 60)
        
        total_cafeterias = len(self.cafeterias_creadas)
        total_tipos = len(self.tipos_cafe_creados)
        
        print(f"‚òï Tipos de caf√©: {total_tipos}")
        print(f"üè™ Cafeter√≠as creadas: {total_cafeterias}")
        print(f"üõçÔ∏è Productos creados: {productos_creados}")
        print(f"üó∫Ô∏è Recorridos creados: {recorridos_creados}")
        
        print(f"\nüìç DISTRIBUCI√ìN POR ZONAS:")
        zonas = {}
        for cafeteria in self.cafeterias_creadas:
            zona = cafeteria.zona
            if zona not in zonas:
                zonas[zona] = 0
            zonas[zona] += 1
        
        for zona, cantidad in zonas.items():
            print(f"   ‚Ä¢ {zona}: {cantidad} cafeter√≠as")
        
        # Estad√≠sticas de calidad
        calificaciones = [float(c.calificacion_promedio) for c in self.cafeterias_creadas]
        precios = [float(c.precio_promedio) for c in self.cafeterias_creadas]
        
        print(f"\nüìà ESTAD√çSTICAS DE CALIDAD:")
        print(f"   ‚≠ê Calificaci√≥n promedio: {sum(calificaciones)/len(calificaciones):.1f}/5.0")
        print(f"   üí∞ Precio promedio: Bs.{sum(precios)/len(precios):.2f}")
        print(f"   üèÜ Mejor calificada: {max(self.cafeterias_creadas, key=lambda x: x.calificacion_promedio).nombre}")
        print(f"   üíù M√°s econ√≥mica: {min(self.cafeterias_creadas, key=lambda x: x.precio_promedio).nombre}")
        
        print(f"\nüéØ BASE DE DATOS COMPLETA Y LISTA")
        print(f"‚úÖ El sistema ahora tiene informaci√≥n real y detallada de Sucre")
        print(f"üó∫Ô∏è Los usuarios pueden explorar {total_cafeterias} cafeter√≠as aut√©nticas")
        print(f"‚òï Con {productos_creados} productos diferentes disponibles")
        print(f"üö∂ Y {recorridos_creados} rutas tem√°ticas personalizadas")


def main():
    """Funci√≥n principal"""
    poblador = PobladorCafeteriasSucre()
    poblador.ejecutar_poblacion_completa()


if __name__ == "__main__":
    main()