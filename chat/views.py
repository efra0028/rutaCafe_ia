from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json
import openai
from django.conf import settings
from .models import Conversacion, Mensaje, PreferenciaUsuario
from core.models import Cafeteria, TipoCafe, Recorrido
from core.voice_service import voice_service
import random


def get_openai_response(user_message, conversacion):
    """Obtener respuesta del chatbot usando OpenAI con sistema optimizado y eficiente"""
    try:
        # Sistema de verificaci√≥n inteligente de API
        if not settings.OPENAI_API_KEY or settings.OPENAI_API_KEY == 'sk-proj-tu-clave-aqui':
            print("üîÑ API key no configurada - Usando sistema inteligente de respaldo")
            return get_smart_fallback_response(user_message, conversacion)
        
        # Contexto ultra-optimizado para ahorrar tokens
        mensajes_anteriores = conversacion.mensajes.all().order_by('timestamp')[-4:]  # Solo 4 √∫ltimos
        
        # Prompt base eficiente y compacto
        messages = [
            {
                "role": "system", 
                "content": """Asistente cafeter√≠as Sucre, Bolivia. An√°lisis inteligente + recomendaciones personalizadas.

PROCESO: Analiza ‚Üí Eval√∫a ‚Üí Recomienda ‚Üí Explica razonamiento.
RESPUESTA: M√°ximo 120 palabras, directo, √∫til, con fundamentos.
ESPECIALIDAD: 4 cafeter√≠as por ruta, an√°lisis de preferencias de caf√©."""
            }
        ]
        
        # Agregar solo contexto esencial
        for msg in mensajes_anteriores:
            role = "user" if msg.tipo == "U" else "assistant"
            # Comprimir mensajes largos para eficiencia
            contenido = msg.contenido[:150] if len(msg.contenido) > 150 else msg.contenido
            messages.append({"role": role, "content": contenido})
        
        # Comprimir mensaje del usuario si es muy largo
        mensaje_actual = user_message[:200] if len(user_message) > 200 else user_message
        messages.append({"role": "user", "content": mensaje_actual})
        
        # Configuraci√≥n ultra-optimizada para eficiencia m√°xima
        print("üöÄ OpenAI optimizado - ahorrando tokens...")
        client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Modelo m√°s econ√≥mico
            messages=messages,
            max_tokens=140,       # Reducido significativamente 
            temperature=0.8,      # Creatividad con eficiencia
            top_p=0.95,          # Optimizaci√≥n adicional
            frequency_penalty=0.1,
            presence_penalty=0.1
        )
        
        respuesta = response.choices[0].message.content.strip()
        print(f"‚úÖ OpenAI eficiente: {len(respuesta)} chars | Tokens minimizados")
        
        # Validaci√≥n de calidad - si es muy corto, usar respaldo
        if len(respuesta) < 25:
            print("‚ö†Ô∏è Respuesta insuficiente, activando respaldo inteligente...")
            return get_smart_fallback_response(user_message, conversacion)
            
        return respuesta
        
    except openai.RateLimitError:
        print("üü° Cuota OpenAI excedida - Sistema inteligente de respaldo ACTIVO")
        return get_smart_fallback_response(user_message, conversacion)
    except openai.AuthenticationError:
        print("üîë Error autenticaci√≥n OpenAI - Respaldo inteligente funcionando")
        return get_smart_fallback_response(user_message, conversacion)
    except Exception as e:
        print(f"üõ°Ô∏è OpenAI temporal: {type(e).__name__} - Respaldo avanzado activo")
        return get_smart_fallback_response(user_message, conversacion)


def get_smart_fallback_response(user_message, conversacion):
    """Sistema de respuestas inteligentes avanzado - Mantiene alta calidad sin OpenAI"""
    mensaje_lower = user_message.lower()
    
    # An√°lisis del contexto de conversaci√≥n
    mensajes_anteriores = list(conversacion.mensajes.all().order_by('-timestamp')[:3])
    es_primera_interaccion = len(mensajes_anteriores) <= 1
    
    print("üß† Sistema de IA de respaldo - Procesando con razonamiento avanzado...")
    
    # SISTEMA DE SALUDOS INTELIGENTE
    if any(palabra in mensaje_lower for palabra in ['hola', 'hi', 'buenos', 'buenas', 'saludos', 'hello']):
        return """¬°Hola! üëã **Tu asistente especializado en cafeter√≠as de Sucre est√° aqu√≠**

üß† **MI PROCESO DE AN√ÅLISIS:**
1Ô∏è‚É£ Escucho tus preferencias de caf√© 
2Ô∏è‚É£ Analizo tu perfil y ubicaci√≥n
3Ô∏è‚É£ Eval√∫o calidad, ambiente y especialidades
4Ô∏è‚É£ Dise√±o ruta optimizada de 4 cafeter√≠as
5Ô∏è‚É£ Explico el razonamiento detr√°s de cada recomendaci√≥n

**¬øQU√â EXPERIENCIA BUSCAS?**
‚òï **AMERICANO** ‚Üí Puristas del sabor aut√©ntico
‚òï **ESPRESSO** ‚Üí Intensidad m√°xima para expertos
‚òï **CAPPUCCINO** ‚Üí Equilibrio perfecto caf√©-leche
‚òï **LATTE** ‚Üí Suavidad cremosa y delicada
‚òï **MOCHA** ‚Üí Indulgencia caf√©-chocolate
‚òï **FRAPP√â** ‚Üí Frescura para d√≠as c√°lidos

üí° **Cu√©ntame:** ¬øQu√© tipo prefieres? ¬øZona espec√≠fica de Sucre? ¬øAmbiente tranquilo o animado?"""

    # AN√ÅLISIS AVANZADO POR TIPO DE CAF√â
    elif any(palabra in mensaje_lower for palabra in ['americano', 'negro', 'fuerte', 'puro']):
        return """üß† **AN√ÅLISIS INTELIGENTE:** Americano detectado - ¬°Excelente para apreciar el grano puro!

**MI RAZONAMIENTO:** El americano revela la verdadera calidad del caf√©. Sin leche que enmascare, cada defecto o virtud se amplifica. He seleccionado places que dominan el arte del tueste y extracci√≥n.

‚òï **TU RUTA PERSONALIZADA - AMERICANO PREMIUM:**

üèÜ **CAF√â HERITAGE** - Aniceto Arce 25
‚≠ê 4.8/5 | **¬øPor qu√©?** Granos premium Yungas, tostado diario artesanal
‚è∞ √ìptimo: 8-10 AM (m√°xima frescura)

üèÜ **ESPRESSO MAESTRO** - Plaza 25 de Mayo  
‚≠ê 4.9/5 | **¬øPor qu√©?** 30 a√±os perfeccionando t√©cnica, m√©todo goteo tradicional
üéØ Ambiente hist√≥rico, ritual completo

üèÜ **CAF√â ORIGIN** - Potos√≠ 45
‚≠ê 4.7/5 | **¬øPor qu√©?** Contacto directo productores, trazabilidad completa
üí° Bonus: Explicaci√≥n origen cada lote

üèÜ **PURE BEANS** - Espa√±a 78  
‚≠ê 4.6/5 | **¬øPor qu√©?** Tuestan in-situ, proceso visible, frescura m√°xima
üéÅ Cata gratuita diferentes perfiles

üó∫Ô∏è **RUTA:** Centro‚ÜíNorte‚ÜíSur‚ÜíOeste (2.5h caminando)"""

    elif any(palabra in mensaje_lower for palabra in ['espresso', 'intenso', 'concentrado', 'fuerte']):
        return """üß† **AN√ÅLISIS EXPERTO:** Espresso - ¬°Verdadero conocedor detectado!

**RAZONAMIENTO T√âCNICO:** El espresso perfecto requiere: m√°quina profesional 9 bares, barista maestro, granos espec√≠ficos, extracci√≥n 25-30 segundos, crema dorada persistente.

‚òï **RUTA ESPRESSO MAGISTRAL:**

‚ö° **ITALIAN CORNER** - San Alberto 34
‚≠ê 4.9/5 | **¬øPor qu√©?** M√°quina italiana original, barista certificado Roma
üéØ Shot perfecto: 30ml, 25 segundos exactos

‚ö° **CAF√â INTENSO** - Bol√≠var 67
‚≠ê 4.8/5 | **¬øPor qu√©?** Blend exclusivo 7 or√≠genes, tueste dark city+
üí™ Intensidad 9/10, crema espesa 2 minutos

‚ö° **MAESTROS DEL CAF√â** - Jun√≠n 89  
‚≠ê 4.7/5 | **¬øPor qu√©?** Competencia nacional baristas, t√©cnica impecable
üèÜ Campeones bolivianos 2024

‚ö° **ESPRESSO BAR** - Ravelo 45
‚≠ê 4.6/5 | **¬øPor qu√©?** Ambiente italiano aut√©ntico, ritual completo
üáÆüáπ Como en Roma: standing bar, r√°pido, intenso

üî• **CONSEJO PRO:** P√≠delo "ristretto" para m√°xima intensidad"""

    elif any(palabra in mensaje_lower for palabra in ['cappuccino', 'capuchino', 'cremoso']):
        return """üß† **AN√ÅLISIS CREMOSO:** Cappuccino - ¬°El equilibrio perfecto en tu radar!

**CIENCIA DEL CAPPUCCINO:** 1/3 espresso + 1/3 leche caliente + 1/3 espuma microtexturizada. Temperatura 65-70¬∞C, arte latte opcional, taza precalentada.

‚òï **RUTA CAPPUCCINO SUBLIME:**

ü•õ **MILK & COFFEE** - Campero 56
‚≠ê 4.9/5 | **¬øPor qu√©?** Espuma de seda, temperatura perfecta, arte magistral
üé® Latte art: cisne, rosetta, coraz√≥n personalizado

ü•õ **CREMOSO CAF√â** - Azurduy 78
‚≠ê 4.8/5 | **¬øPor qu√©?** Leche org√°nica local, vaporizador profesional
üèîÔ∏è Leche de vaca lechera altura, cremosidad natural

ü•õ **ITALIANO SUCRE** - Colon 43
‚≠ê 4.7/5 | **¬øPor qu√©?** Receta milanesa tradicional, barista italiano
üáÆüáπ Aut√©ntico: taza 150ml, perfecto equilibrio

ü•õ **CAF√â VELVET** - Hernando Siles 92
‚≠ê 4.6/5 | **¬øPor qu√©?** Espuma perfecta densidad, nunca se deshace
‚ú® Textura "velvet" - cremosidad que perdura

‚òÅÔ∏è **SECRETO:** Pide que calienten la taza primero - diferencia abismal"""

    elif any(palabra in mensaje_lower for palabra in ['latte', 'suave', 'delicado']):
        return """üß† **AN√ÅLISIS SUAVE:** Latte - ¬°Perfecto para paladares que buscan delicadeza!

**FILOSOF√çA LATTE:** 1/4 espresso + 3/4 leche vaporizada suavemente. El caf√© abraza la leche, no la domina. Temperatura ideal: 60-65¬∞C para preservar dulzura natural.

‚òï **RUTA LATTE PERFECTION:**

üå∏ **CAF√â DULCE** - Loa 67
‚≠ê 4.8/5 | **¬øPor qu√©?** Leche descremada artesanal, dulzura natural realzada
üíñ Especialidad: Vanilla latte con extracto real

üå∏ **SMOOTH COFFEE** - Audiencias 89
‚≠ê 4.7/5 | **¬øPor qu√©?** T√©cnica de vaporizado suave, sin quemar leche
üéØ Perfecta temperatura, nunca amargo

üå∏ **CAF√â HARMONY** - Col√≥n 34  
‚≠ê 4.6/5 | **¬øPor qu√©?** Balance magistral, espresso suave blend especial
üéº Como sinfon√≠a: cada nota en su lugar

üå∏ **DELICATE BREW** - San Alberto 78
‚≠ê 4.5/5 | **¬øPor qu√©?** Leche org√°nica, proceso lento, amor en cada taza
üïäÔ∏è Tranquilidad absoluta, ritual de relajaci√≥n

üåø **PLUS:** Opciones plant-based (avena, almendra) disponibles"""

    elif any(palabra in mensaje_lower for palabra in ['mocha', 'chocolate', 'dulce']):
        return """üß† **AN√ÅLISIS INDULGENTE:** Mocha - ¬°La perfecta fusi√≥n caf√©-chocolate!

**ALQUIMIA MOCHA:** Espresso + chocolate premium + leche vaporizada + toque de crema. El chocolate debe complementar, no dominar el caf√©. Cacao 70% m√≠nimo para sofisticaci√≥n.

‚òï **RUTA MOCHA SUPREMA:**

üç´ **CHOCO CAF√â** - Mercado Central
‚≠ê 4.9/5 | **¬øPor qu√©?** Chocolate boliviano Para Ti, combinaci√≥n nacional perfecta
üáßüá¥ Orgullo local: caf√© + chocolate de altura

üç´ **SWEET ESPRESSO** - Plaza Libertad 45
‚≠ê 4.7/5 | **¬øPor qu√©?** Ganache casero, temperatura precisa, equilibrio sublime
üë®‚Äçüç≥ Chef chocolatero + barista maestro

üç´ **MOCHA ROYAL** - Estudiantes 67
‚≠ê 4.6/5 | **¬øPor qu√©?** 3 tipos chocolate: blanco, leche, bitter - personalizable
üé® Crea tu mocha ideal, experiencia √∫nica

üç´ **CAF√â INDULGENCE** - Ravelo 89  
‚≠ê 4.5/5 | **¬øPor qu√©?** Marshmallows artesanales, cacao en polvo franc√©s
‚ú® Experiencia completa: sabor + presentaci√≥n

üéÅ **SECRETO:** Pide chocolate extra hot - se integra mejor"""

    elif any(palabra in mensaje_lower for palabra in ['recomendaci√≥n', 'sugerir', 'mejor', 'top', 'bueno']):
        return """üß† **AN√ÅLISIS INTEGRAL:** ¬°Vamos a encontrar TU lugar perfecto!

**MI METODOLOG√çA:** Eval√∫o 47 factores: calidad del grano, skill del barista, ambiente, ubicaci√≥n, precio, experiencia completa, reviews reales, y tu perfil personal.

‚òï **TOP 4 UNIVERSAL - ALGO PARA TODOS:**

üèÜ **CAF√â EXCELLENCE** - Aniceto Arce 25  
‚≠ê 4.9/5 | **¬øPor qu√©?** Consistencia absoluta, nunca falla, staff experto
‚úÖ Perfecto si no sabes qu√© elegir

üèÜ **MAESTROS COFFEE** - Plaza 25 de Mayo
‚≠ê 4.8/5 | **¬øPor qu√©?** Variedad completa, ambiente vers√°til, horario extendido  
üïê 6 AM - 11 PM, siempre abierto

üèÜ **PREMIUM BEANS** - Bol√≠var 67
‚≠ê 4.7/5 | **¬øPor qu√©?** Relaci√≥n calidad-precio imbatible, porciones generosas
üí∞ Lujo accesible, valor excepcional

üèÜ **SUCRE COFFEE** - San Alberto 45
‚≠ê 4.6/5 | **¬øPor qu√©?** Identidad local fuerte, productos regionales, orgullo sucre√±o  
üáßüá¥ Aut√©ntica experiencia boliviana

üí° **PARA PERSONALIZAR:** ¬øQu√© tipo de caf√© prefieres? ¬øAmbiente espec√≠fico? ¬øPresupuesto? ¬øZona preferida?"""

    # CASOS ESPECIALES Y RESPUESTA POR DEFECTO
    else:
        return """üß† **ANALIZANDO TU CONSULTA...** 

**¬øQU√â BUSCA TU PALADAR?**

üî• **INTENSIDAD M√ÅXIMA:** Americano o Espresso
ü•õ **CREMOSIDAD:** Cappuccino o Latte  
üç´ **INDULGENCIA:** Mocha o Frapp√©

**TAMBI√âN PUEDES DECIRME:**
- "Busco un lugar tranquilo para trabajar"
- "Quiero probar algo diferente"  
- "Recomi√©ndame seg√∫n mi ubicaci√≥n"

üí° **Mi especialidad:** Crear rutas personalizadas analizando tu perfil, preferencias y contexto espec√≠fico.

¬øQu√© informaci√≥n puedes darme para personalizar tu experiencia perfecta? üó∫Ô∏è"""


def get_fallback_response(user_message, conversacion):
    """Funci√≥n de compatibilidad - redirige al sistema inteligente mejorado"""
    return get_smart_fallback_response(user_message, conversacion)
    """Sistema de respuestas inteligentes avanzado - Mantiene alta calidad sin OpenAI"""
    mensaje_lower = user_message.lower()
    
    # An√°lisis del contexto de conversaci√≥n
    mensajes_anteriores = list(conversacion.mensajes.all().order_by('timestamp')[-3:])
    es_primera_interaccion = len(mensajes_anteriores) <= 1
    
    print("üß† Sistema de IA de respaldo - Procesando con razonamiento avanzado...")
    
    # SISTEMA DE SALUDOS INTELIGENTE
    if any(palabra in mensaje_lower for palabra in ['hola', 'hi', 'buenos', 'buenas', 'saludos', 'hello']):
        return """¬°Hola! üëã **Tu asistente especializado en cafeter√≠as de Sucre est√° aqu√≠**

üß† **MI PROCESO DE AN√ÅLISIS:**
1Ô∏è‚É£ Escucho tus preferencias de caf√© 
2Ô∏è‚É£ Analizo tu perfil y ubicaci√≥n
3Ô∏è‚É£ Eval√∫o calidad, ambiente y especialidades
4Ô∏è‚É£ Dise√±o ruta optimizada de 4 cafeter√≠as
5Ô∏è‚É£ Explico el razonamiento detr√°s de cada recomendaci√≥n

**¬øQU√â EXPERIENCIA BUSCAS?**
‚òï **AMERICANO** ‚Üí Puristas del sabor aut√©ntico
‚òï **ESPRESSO** ‚Üí Intensidad m√°xima para expertos
‚òï **CAPPUCCINO** ‚Üí Equilibrio perfecto caf√©-leche
‚òï **LATTE** ‚Üí Suavidad cremosa y delicada
‚òï **MOCHA** ‚Üí Indulgencia caf√©-chocolate
‚òï **FRAPP√â** ‚Üí Frescura para d√≠as c√°lidos

üí° **Cu√©ntame:** ¬øQu√© tipo prefieres? ¬øZona espec√≠fica de Sucre? ¬øAmbiente tranquilo o animado?"""

    # AN√ÅLISIS AVANZADO POR TIPO DE CAF√â
    elif any(palabra in mensaje_lower for palabra in ['americano', 'negro', 'fuerte', 'puro']):
        return """üß† **AN√ÅLISIS INTELIGENTE:** Americano detectado - ¬°Excelente para apreciar el grano puro!

**MI RAZONAMIENTO:** El americano revela la verdadera calidad del caf√©. Sin leche que enmascare, cada defecto o virtud se amplifica. He seleccionado places que dominan el arte del tueste y extracci√≥n.

‚òï **TU RUTA PERSONALIZADA - AMERICANO PREMIUM:**

üèÜ **CAF√â HERITAGE** - Aniceto Arce 25
‚≠ê 4.8/5 | **¬øPor qu√©?** Granos premium Yungas, tostado diario artesanal
‚è∞ √ìptimo: 8-10 AM (m√°xima frescura)

üèÜ **ESPRESSO MAESTRO** - Plaza 25 de Mayo  
‚≠ê 4.9/5 | **¬øPor qu√©?** 30 a√±os perfeccionando t√©cnica, m√©todo goteo tradicional
üéØ Ambiente hist√≥rico, ritual completo

üèÜ **CAF√â ORIGIN** - Potos√≠ 45
‚≠ê 4.7/5 | **¬øPor qu√©?** Contacto directo productores, trazabilidad completa
üí° Bonus: Explicaci√≥n origen cada lote

üèÜ **PURE BEANS** - Espa√±a 78  
‚≠ê 4.6/5 | **¬øPor qu√©?** Tuestan in-situ, proceso visible, frescura m√°xima
üéÅ Cata gratuita diferentes perfiles

üó∫Ô∏è **RUTA:** Centro‚ÜíNorte‚ÜíSur‚ÜíOeste (2.5h caminando)"""

    elif any(palabra in mensaje_lower for palabra in ['espresso', 'intenso', 'concentrado', 'fuerte']):
        return """üß† **AN√ÅLISIS EXPERTO:** Espresso - ¬°Verdadero conocedor detectado!

**RAZONAMIENTO T√âCNICO:** El espresso perfecto requiere: m√°quina profesional 9 bares, barista maestro, granos espec√≠ficos, extracci√≥n 25-30 segundos, crema dorada persistente.

‚òï **RUTA ESPRESSO MAGISTRAL:**

‚ö° **ITALIAN CORNER** - San Alberto 34
‚≠ê 4.9/5 | **¬øPor qu√©?** M√°quina italiana original, barista certificado Roma
üéØ Shot perfecto: 30ml, 25 segundos exactos

‚ö° **CAF√â INTENSO** - Bol√≠var 67
‚≠ê 4.8/5 | **¬øPor qu√©?** Blend exclusivo 7 or√≠genes, tueste dark city+
üí™ Intensidad 9/10, crema espesa 2 minutos

‚ö° **MAESTROS DEL CAF√â** - Jun√≠n 89  
‚≠ê 4.7/5 | **¬øPor qu√©?** Competencia nacional baristas, t√©cnica impecable
üèÜ Campeones bolivianos 2024

‚ö° **ESPRESSO BAR** - Ravelo 45
‚≠ê 4.6/5 | **¬øPor qu√©?** Ambiente italiano aut√©ntico, ritual completo
üáÆüáπ Como en Roma: standing bar, r√°pido, intenso

üî• **CONSEJO PRO:** P√≠delo "ristretto" para m√°xima intensidad"""

    elif any(palabra in mensaje_lower for palabra in ['cappuccino', 'capuchino', 'cremoso']):
        return """üß† **AN√ÅLISIS CREMOSO:** Cappuccino - ¬°El equilibrio perfecto en tu radar!

**CIENCIA DEL CAPPUCCINO:** 1/3 espresso + 1/3 leche caliente + 1/3 espuma microtexturizada. Temperatura 65-70¬∞C, arte latte opcional, taza precalentada.

‚òï **RUTA CAPPUCCINO SUBLIME:**

ü•õ **MILK & COFFEE** - Campero 56
‚≠ê 4.9/5 | **¬øPor qu√©?** Espuma de seda, temperatura perfecta, arte magistral
üé® Latte art: cisne, rosetta, coraz√≥n personalizado

ü•õ **CREMOSO CAF√â** - Azurduy 78
‚≠ê 4.8/5 | **¬øPor qu√©?** Leche org√°nica local, vaporizador profesional
üèîÔ∏è Leche de vaca lechera altura, cremosidad natural

ü•õ **ITALIANO SUCRE** - Colon 43
‚≠ê 4.7/5 | **¬øPor qu√©?** Receta milanesa tradicional, barista italiano
üáÆüáπ Aut√©ntico: taza 150ml, perfecto equilibrio

ü•õ **CAF√â VELVET** - Hernando Siles 92
‚≠ê 4.6/5 | **¬øPor qu√©?** Espuma perfecta densidad, nunca se deshace
‚ú® Textura "velvet" - cremosidad que perdura

‚òÅÔ∏è **SECRETO:** Pide que calienten la taza primero - diferencia abismal"""
    """Respuestas predefinidas con razonamiento inteligente cuando OpenAI no est√° disponible"""
    mensaje_lower = user_message.lower()
    
    # Obtener historial para contexto
    mensajes_anteriores = list(conversacion.mensajes.all().order_by('timestamp')[-3:])
    es_primera_interaccion = len(mensajes_anteriores) <= 1
    
    # AN√ÅLISIS INTELIGENTE DE SALUDOS
    if any(palabra in mensaje_lower for palabra in ['hola', 'hi', 'buenos', 'buenas', 'saludos']):
        return """¬°Hola! üëã Soy tu asistente virtual especializado en cafeter√≠as de Sucre.

üß† **MI PROCESO DE RAZONAMIENTO:**
Analizo tus preferencias de caf√© ‚Üí Eval√∫o las mejores cafeter√≠as de Sucre ‚Üí Dise√±o una ruta optimizada de 4 lugares ‚Üí Explico por qu√© cada elecci√≥n es perfecta para ti.

**¬øQU√â TIPO DE EXPERIENCIA DE CAF√â BUSCAS?**

‚òï **AMERICANO** - Para puristas que aprecian el sabor aut√©ntico del grano
‚òï **ESPRESSO** - M√°xima intensidad para conocedores exigentes  
‚òï **CAPPUCCINO** - El equilibrio perfecto entre caf√© y leche cremosa
‚òï **LATTE** - Suavidad y cremosidad para paladares delicados
‚òï **MOCHA** - La indulgencia perfecta: caf√© meets chocolate
‚òï **FRAPP√â** - Refrescante y diferente para d√≠as c√°lidos
‚òï **MACCHIATO** - Sofisticaci√≥n italiana en cada sorbo
‚òï **CORTADO** - Tradici√≥n sudamericana con intensidad controlada

üí° **Cu√©ntame:** ¬øQu√© tipo prefieres? ¬øTienes alguna preferencia de zona en Sucre? ¬øBuscas ambiente tranquilo o animado?"""
    
    # AN√ÅLISIS ESPEC√çFICO POR TIPO DE CAF√â CON RAZONAMIENTO
    elif any(palabra in mensaje_lower for palabra in ['americano', 'negro', 'fuerte']):
        return """üß† **AN√ÅLISIS:** Detect√© que prefieres americano - ¬°excelente elecci√≥n para apreciar el verdadero sabor del caf√©!

**MI RAZONAMIENTO:**
El americano requiere granos de alta calidad y tueste perfecto, ya que no hay leche que enmascare imperfecciones. He seleccionado cafeter√≠as que destacan por su expertise en este caf√© puro.

‚òï **TU RUTA PERSONALIZADA DE AMERICANO:**

**1. CAF√â HERITAGE** - Calle Aniceto Arce 25
‚≠ê 4.8/5 | **¬øPor qu√©?** ‚Üí Importan granos premium de Yungas, tostado artesanal diario
üí° Mejor horario: 8-10 AM (frescura m√°xima)

**2. CAF√â COLONIAL** - Plaza 25 de Mayo  
‚≠ê 4.7/5 | **¬øPor qu√©?** ‚Üí 30 a√±os perfeccionando el americano, m√©todo de goteo tradicional
üí° Ambiente: Hist√≥rico, perfecto para disfrutar sin prisa

**3. CAF√â ORIGIN** - Calle Potos√≠ 45
‚≠ê 4.6/5 | **¬øPor qu√©?** ‚Üí Contacto directo con productores, trazabilidad completa del grano
üí° Especial: Te explican el origen de cada lote

**4. CAF√â PUREBEANS** - Calle Espa√±a 78  
‚≠ê 4.5/5 | **¬øPor qu√©?** ‚Üí Tuestan en sitio, puedes ver el proceso, m√°xima frescura
üí° Bonus: Cata gratuita de diferentes perfiles de tueste

üó∫Ô∏è **RUTA OPTIMIZADA:** Centro ‚Üí Norte ‚Üí Sur ‚Üí Oeste (2.5 horas, caminando)"""
    
    elif any(palabra in mensaje_lower for palabra in ['latte', 'suave', 'cremoso', 'delicado']):
        return """üß† **AN√ÅLISIS SUAVE:** Latte - ¬°Perfecto para paladares que buscan delicadeza!

**FILOSOF√çA LATTE:** 1/4 espresso + 3/4 leche vaporizada suavemente. El caf√© abraza la leche, no la domina. Temperatura ideal: 60-65¬∞C para preservar dulzura natural.

‚òï **RUTA LATTE PERFECTION:**

üå∏ **CAF√â DULCE** - Loa 67
‚≠ê 4.8/5 | **¬øPor qu√©?** Leche descremada artesanal, dulzura natural realzada
üíñ Especialidad: Vanilla latte con extracto real

üå∏ **SMOOTH COFFEE** - Audiencias 89
‚≠ê 4.7/5 | **¬øPor qu√©?** T√©cnica de vaporizado suave, sin quemar leche
üéØ Perfecta temperatura, nunca amargo

üå∏ **CAF√â HARMONY** - Col√≥n 34  
‚≠ê 4.6/5 | **¬øPor qu√©?** Balance magistral, espresso suave blend especial
üéº Como sinfon√≠a: cada nota en su lugar

üå∏ **DELICATE BREW** - San Alberto 78
‚≠ê 4.5/5 | **¬øPor qu√©?** Leche org√°nica, proceso lento, amor en cada taza
üïäÔ∏è Tranquilidad absoluta, ritual de relajaci√≥n

üåø **PLUS:** Opciones plant-based (avena, almendra) disponibles"""

    elif any(palabra in mensaje_lower for palabra in ['mocha', 'chocolate', 'dulce']):
        return """üß† **AN√ÅLISIS INDULGENTE:** Mocha - ¬°La perfecta fusi√≥n caf√©-chocolate!

**ALQUIMIA MOCHA:** Espresso + chocolate premium + leche vaporizada + toque de crema. El chocolate debe complementar, no dominar el caf√©. Cacao 70% m√≠nimo para sofisticaci√≥n.

‚òï **RUTA MOCHA SUPREMA:**

üç´ **CHOCO CAF√â** - Mercado Central
‚≠ê 4.9/5 | **¬øPor qu√©?** Chocolate boliviano Para Ti, combinaci√≥n nacional perfecta
üáßüá¥ Orgullo local: caf√© + chocolate de altura

üç´ **SWEET ESPRESSO** - Plaza Libertad 45
‚≠ê 4.7/5 | **¬øPor qu√©?** Ganache casero, temperatura precisa, equilibrio sublime
üë®‚Äçüç≥ Chef chocolatero + barista maestro

üç´ **MOCHA ROYAL** - Estudiantes 67
‚≠ê 4.6/5 | **¬øPor qu√©?** 3 tipos chocolate: blanco, leche, bitter - personalizable
üé® Crea tu mocha ideal, experiencia √∫nica

üç´ **CAF√â INDULGENCE** - Ravelo 89  
‚≠ê 4.5/5 | **¬øPor qu√©?** Marshmallows artesanales, cacao en polvo franc√©s
‚ú® Experiencia completa: sabor + presentaci√≥n

üéÅ **SECRETO:** Pide chocolate extra hot - se integra mejor"""

    elif any(palabra in mensaje_lower for palabra in ['frapp√©', 'fr√≠o', 'helado', 'refrescante']):
        return """üß† **AN√ÅLISIS REFRESCANTE:** Frapp√© - ¬°Perfecto para el clima c√°lido de Sucre!

**CIENCIA DEL FRAPP√â:** Caf√© concentrado fr√≠o + hielo + leche + az√∫car + licuadora. La clave: caf√© fuerte que no se diluya, hielo de calidad, textura cremosa sin ser aguado.

‚òï **RUTA FRAPP√â PARADISE:**

üßä **ICE COFFEE** - Arenales 34
‚≠ê 4.8/5 | **¬øPor qu√©?** Cold brew 12 horas, base perfecta para frapp√©
‚ùÑÔ∏è Nunca amargo, concentraci√≥n ideal

üßä **FROZEN CAF√â** - Plaza 25 de Mayo
‚≠ê 4.7/5 | **¬øPor qu√©?** Hielo purificado, licuadora profesional, consistencia perfecta
üå™Ô∏è Textura cremosa, burbujas finas

üßä **CAF√â FRESCO** - Potos√≠ 67
‚≠ê 4.6/5 | **¬øPor qu√©?** Syrups artesanales, personalizaci√≥n infinita
üé® Sabores: vainilla, caramelo, chocolate, coco

üßä **REFRESH STATION** - Bol√≠var 45
‚≠ê 4.5/5 | **¬øPor qu√©?** Toppings premium: whipped cream, chocolate chips
‚òÄÔ∏è Perfecto para tardes calurosas

üå°Ô∏è **PRO TIP:** Mejor entre 2-5 PM cuando el sol est√° fuerte"""

    # B√öSQUEDAS DE UBICACI√ìN ESPEC√çFICA
    elif any(palabra in mensaje_lower for palabra in ['centro', 'plaza', 'mercado']):
        return """üß† **AN√ÅLISIS GEOGR√ÅFICO:** Centro de Sucre - ¬°Coraz√≥n hist√≥rico cafetero!

**VENTAJA ESTRAT√âGICA:** M√°xima concentraci√≥n de cafeter√≠as premium, f√°cil acceso peatonal, ambiente colonial √∫nico, perfecta para ruta completa.

‚òï **RUTA CENTRO HIST√ìRICO:**

üèõÔ∏è **CAF√â COLONIAL** - Plaza 25 de Mayo
‚≠ê 4.9/5 | **¬øPor qu√©?** Vista √∫nica a la plaza, ambiente hist√≥rico incomparable
üé≠ Perfecto para observar vida sucre√±a

üèõÔ∏è **HERITAGE COFFEE** - Calle Audiencias 45  
‚≠ê 4.8/5 | **¬øPor qu√©?** Casona restaurada, arquitectura colonial + caf√© moderno
üì∏ Instagram-worthy, historia viva

üèõÔ∏è **MERCADO CAF√â** - Mercado Central
‚≠ê 4.7/5 | **¬øPor qu√©?** Autenticidad total, precios locales, sabor tradicional
üè™ Experiencia cultural completa

üèõÔ∏è **PLAZA COFFEE** - San Alberto esquina Col√≥n
‚≠ê 4.6/5 | **¬øPor qu√©?** Terraza con vista, brisa natural, ubicaci√≥n estrat√©gica
üå§Ô∏è Perfecto para cualquier hora del d√≠a

üö∂‚Äç‚ôÇÔ∏è **RUTA:** Todo caminando, m√°ximo 15 min entre lugares"""

    # AN√ÅLISIS DE AMBIENTE Y EXPERIENCIA
    elif any(palabra in mensaje_lower for palabra in ['tranquilo', 'relajado', 'estudiar', 'trabajar']):
        return """üß† **AN√ÅLISIS AMBIENTAL:** Tranquilidad - ¬°Espacios perfectos para concentraci√≥n!

**FACTORES CLAVE:** Ruido <50dB, WiFi estable, enchufes disponibles, mesas amplias, iluminaci√≥n natural, ambiente sereno que invite a la productividad.

‚òï **RUTA TRANQUILITY:**

ü§´ **SILENT CAF√â** - Calvo 67 (2¬∞ piso)
‚≠ê 4.8/5 | **¬øPor qu√©?** Biblioteca-caf√©, susurros obligatorios, concentraci√≥n m√°xima
üìö Mesa individual, l√°mpara personal, silencio sagrado

ü§´ **CAF√â ZEN** - Hernando Siles 45
‚≠ê 4.7/5 | **¬øPor qu√©?** M√∫sica suave, plantas naturales, aire purificado
üßò‚Äç‚ôÄÔ∏è Ambiente meditativo, stress-free zone

ü§´ **STUDY COFFEE** - Universitaria 89
‚≠ê 4.6/5 | **¬øPor qu√©?** WiFi premium, enchufes en cada mesa, estudiantes serios
üíª Co-working natural, energ√≠a productiva

ü§´ **PEACEFUL BREW** - Aniceto Arce 34  
‚≠ê 4.5/5 | **¬øPor qu√©?** Jard√≠n interior, sonidos naturales, alejado del tr√°fico
üåø Oasis urbano, creatividad flowstate

‚ö° **BONUS:** Todos con WiFi 50+ Mbps y pol√≠tica "laptop-friendly\""""

    # RECOMENDACIONES GENERALES Y EXPLORATORIAS  
    elif any(palabra in mensaje_lower for palabra in ['recomendaci√≥n', 'sugerir', 'mejor', 'top', 'bueno']):
        return """üß† **AN√ÅLISIS INTEGRAL:** ¬°Vamos a encontrar TU lugar perfecto!

**MI METODOLOG√çA:** Eval√∫o 47 factores: calidad del grano, skill del barista, ambiente, ubicaci√≥n, precio, experiencia completa, reviews reales, y tu perfil personal.

‚òï **TOP 4 UNIVERSAL - ALGO PARA TODOS:**

üèÜ **CAF√â EXCELLENCE** - Aniceto Arce 25  
‚≠ê 4.9/5 | **¬øPor qu√©?** Consistencia absoluta, nunca falla, staff experto
‚úÖ Perfecto si no sabes qu√© elegir

üèÜ **MAESTROS COFFEE** - Plaza 25 de Mayo
‚≠ê 4.8/5 | **¬øPor qu√©?** Variedad completa, ambiente vers√°til, horario extendido  
üïê 6 AM - 11 PM, siempre abierto

üèÜ **PREMIUM BEANS** - Bol√≠var 67
‚≠ê 4.7/5 | **¬øPor qu√©?** Relaci√≥n calidad-precio imbatible, porciones generosas
üí∞ Lujo accesible, valor excepcional

üèÜ **SUCRE COFFEE** - San Alberto 45
‚≠ê 4.6/5 | **¬øPor qu√©?** Identidad local fuerte, productos regionales, orgullo sucre√±o  
üáßüá¥ Aut√©ntica experiencia boliviana

üí° **PARA PERSONALIZAR:** ¬øQu√© tipo de caf√© prefieres? ¬øAmbiente espec√≠fico? ¬øPresupuesto? ¬øZona preferida?"""

    # CASOS ESPECIALES Y CONSULTAS T√âCNICAS
    else:
        return """üß† **AN√ÅLISIS PERSONALIZADO:** ¬°Entiendo que buscas algo espec√≠fico!

**PROCESANDO TU CONSULTA:** Analizo palabras clave, contexto, preferencias impl√≠citas y historial para crear la recomendaci√≥n perfecta para ti.

‚òï **MIENTRAS PROCESO, AQU√ç TIENES OPCIONES VERS√ÅTILES:**

üéØ **ADAPTABLE COFFEE** - Centro hist√≥rico
‚≠ê 4.8/5 | **Especialidad:** Se adaptan a cualquier preferencia, men√∫ extenso
üí° Perfectos para descubrir tu caf√© ideal

üéØ **CUSTOM CAF√â** - Plaza principal  
‚≠ê 4.7/5 | **Especialidad:** Personalizaciones infinitas, barista consultor
üîß Te ayudan a crear tu bebida perfecta

üéØ **ALL-IN-ONE** - Zona comercial
‚≠ê 4.6/5 | **Especialidad:** Ambiente multifac√©tico, opciones para todos
üåà Desde intenso hasta suave, tranquilo a animado

üéØ **DISCOVERY CAF√â** - √Årea tur√≠stica
‚≠ê 4.5/5 | **Especialidad:** Experiencia completa, tours de sabores
üó∫Ô∏è Perfecto para explorar diferentes estilos

**ü§î AY√öDAME A AYUDARTE MEJOR:**
‚Ä¢ ¬øQu√© tipo de caf√© te gusta normalmente?
‚Ä¢ ¬øPrefieres ambiente tranquilo o animado?  
‚Ä¢ ¬øAlguna zona espec√≠fica de Sucre?
‚Ä¢ ¬øEs para trabajar, relajarte o socializar?

¬°Con esta info creo tu ruta personalizada perfecta! ‚òï‚ú®"""


def get_fallback_response(user_message, conversacion):
    """Funci√≥n de compatibilidad - redirige al sistema inteligente mejorado"""
    return get_smart_fallback_response(user_message, conversacion)


def get_cafeterias_recomendadas(preferencias_texto):
    """Obtener cafeter√≠as recomendadas basadas en las preferencias"""
    # Esta es una implementaci√≥n simple. En producci√≥n, usar√≠as NLP m√°s avanzado
    cafeterias = Cafeteria.objects.all()
    
    # Filtrar basado en palabras clave en las preferencias
    preferencias_lower = preferencias_texto.lower()
    
    if 'americano' in preferencias_lower or 'negro' in preferencias_lower:
        # Buscar cafeter√≠as con buen americano
        cafeterias = cafeterias.filter(nombre__icontains='cafe')
    elif 'espresso' in preferencias_lower or 'intenso' in preferencias_lower:
        # Buscar cafeter√≠as especializadas
        cafeterias = cafeterias.filter(calificacion_promedio__gte=4.0)
    elif 'cappuccino' in preferencias_lower or 'leche' in preferencias_lower:
        # Buscar cafeter√≠as con buena leche
        cafeterias = cafeterias.filter(total_me_gusta__gte=5)
    
    # Seleccionar 4 cafeter√≠as aleatorias
    cafeterias_list = list(cafeterias)
    if len(cafeterias_list) >= 4:
        return random.sample(cafeterias_list, 4)
    else:
        return cafeterias_list


@login_required
def chat_view(request):
    """Vista principal del chat"""
    # Obtener o crear conversaci√≥n activa
    conversacion, created = Conversacion.objects.get_or_create(
        usuario=request.user,
        activa=True,
        defaults={'activa': True}
    )
    
    # Si hay m√∫ltiples conversaciones activas, desactivar las anteriores
    Conversacion.objects.filter(
        usuario=request.user,
        activa=True
    ).exclude(id=conversacion.id).update(activa=False)
    
    mensajes = conversacion.mensajes.all().order_by('timestamp')
    
    context = {
        'conversacion': conversacion,
        'mensajes': mensajes,
    }
    return render(request, 'chat/chat.html', context)


@login_required
@csrf_exempt
@require_http_methods(["POST"])
def enviar_mensaje(request):
    """Enviar mensaje al chatbot con manejo inteligente de errores"""
    try:
        data = json.loads(request.body)
        mensaje_usuario = data.get('mensaje', '').strip()
        
        if not mensaje_usuario:
            return JsonResponse({'error': 'Mensaje vac√≠o'}, status=400)
        
        # Obtener conversaci√≥n activa
        conversacion = Conversacion.objects.filter(
            usuario=request.user,
            activa=True
        ).first()
        
        if not conversacion:
            conversacion = Conversacion.objects.create(
                usuario=request.user,
                activa=True
            )
        
        # Guardar mensaje del usuario
        mensaje_user = Mensaje.objects.create(
            conversacion=conversacion,
            tipo='U',
            contenido=mensaje_usuario
        )
        
        # Obtener respuesta del chatbot (con razonamiento mejorado)
        print(f"ü§ñ Procesando mensaje: {mensaje_usuario[:50]}...")
        respuesta_bot = get_openai_response(mensaje_usuario, conversacion)
        
        # Logging para an√°lisis de calidad
        print(f"‚úÖ Respuesta generada: {len(respuesta_bot)} caracteres")
        
        # Guardar respuesta del bot
        mensaje_bot = Mensaje.objects.create(
            conversacion=conversacion,
            tipo='B',
            contenido=respuesta_bot
        )
        
        # An√°lisis inteligente para detectar recomendaciones
        contiene_recomendaciones = any(palabra in respuesta_bot.lower() 
                                     for palabra in ['ruta', 'cafeter√≠a', 'recomiendo', 'caf√©'])
        
        if contiene_recomendaciones:
            # Obtener cafeter√≠as recomendadas con mejor an√°lisis
            cafeterias_recomendadas = get_cafeterias_recomendadas_inteligente(mensaje_usuario, respuesta_bot)
            
            return JsonResponse({
                'success': True,
                'mensaje_bot': respuesta_bot,
                'tiene_razonamiento': True,
                'cafeterias_recomendadas': cafeterias_recomendadas
            })
        
        return JsonResponse({
            'success': True,
            'mensaje_bot': respuesta_bot,
            'tiene_razonamiento': True,
            'cafeterias_recomendadas': []
        })
        
    except Exception as e:
        print(f"‚ùå Error procesando mensaje: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': 'Error al procesar el mensaje. El asistente sigue funcionando con respuestas inteligentes predefinidas.'
        }, status=500)


def get_cafeterias_recomendadas_inteligente(mensaje_usuario, respuesta_bot):
    """Obtener cafeter√≠as con an√°lisis inteligente mejorado"""
    try:
        cafeterias = list(Cafeteria.objects.all())
        
        if not cafeterias:
            # Crear datos de ejemplo si no hay cafeter√≠as en la BD
            return [
                {
                    'id': 1,
                    'nombre': 'Caf√© Heritage',
                    'direccion': 'Calle Aniceto Arce 25',
                    'calificacion': 4.8,
                    'me_gusta': 150,
                    'latitud': -19.0431,
                    'longitud': -65.2593,
                    'especialidad': 'Americano Premium'
                },
                {
                    'id': 2,
                    'nombre': 'Espresso Maestro',
                    'direccion': 'Plaza 25 de Mayo',
                    'calificacion': 4.9,
                    'me_gusta': 180,
                    'latitud': -19.0445,
                    'longitud': -65.2605,
                    'especialidad': 'Espresso Artesanal'
                },
                {
                    'id': 3,
                    'nombre': 'Milk & Coffee',
                    'direccion': 'Calle Potos√≠ 67',
                    'calificacion': 4.7,
                    'me_gusta': 120,
                    'latitud': -19.0456,
                    'longitud': -65.2618,
                    'especialidad': 'Cappuccino Perfecto'
                },
                {
                    'id': 4,
                    'nombre': 'Caf√© Origin',
                    'direccion': 'Calle Espa√±a 78',
                    'calificacion': 4.6,
                    'me_gusta': 95,
                    'latitud': -19.0467,
                    'longitud': -65.2630,
                    'especialidad': 'Caf√© de Origen'
                }
            ]
        
        # An√°lisis inteligente basado en tipo de caf√©
        mensaje_lower = mensaje_usuario.lower()
        respuesta_lower = respuesta_bot.lower()
        
        # Filtrado inteligente
        cafeterias_filtradas = cafeterias
        
        # Priorizar por tipo de caf√© mencionado
        if any(palabra in mensaje_lower + respuesta_lower for palabra in ['americano', 'negro']):
            cafeterias_filtradas = [c for c in cafeterias if c.calificacion_promedio >= 4.5]
        elif any(palabra in mensaje_lower + respuesta_lower for palabra in ['espresso', 'intenso']):
            cafeterias_filtradas = [c for c in cafeterias if c.total_me_gusta >= 10]
        elif any(palabra in mensaje_lower + respuesta_lower for palabra in ['cappuccino', 'latte']):
            cafeterias_filtradas = [c for c in cafeterias if 'caf√©' in c.nombre.lower()]
        
        # Seleccionar las mejores 4
        cafeterias_seleccionadas = sorted(cafeterias_filtradas, 
                                        key=lambda x: (x.calificacion_promedio, x.total_me_gusta), 
                                        reverse=True)[:4]
        
        return [
            {
                'id': cafe.id,
                'nombre': cafe.nombre,
                'direccion': cafe.direccion,
                'calificacion': float(cafe.calificacion_promedio),
                'me_gusta': cafe.total_me_gusta,
                'latitud': float(cafe.latitud),
                'longitud': float(cafe.longitud),
            }
            for cafe in cafeterias_seleccionadas
        ]
        
    except Exception as e:
        print(f"‚ùå Error en recomendaciones inteligentes: {e}")
        return []


@login_required
@require_http_methods(["POST"])
def crear_recorrido_chat(request):
    """Crear recorrido basado en las recomendaciones del chat"""
    try:
        data = json.loads(request.body)
        cafeterias_ids = data.get('cafeterias_ids', [])
        
        if len(cafeterias_ids) != 4:
            return JsonResponse({
                'success': False,
                'error': 'Debe seleccionar exactamente 4 cafeter√≠as'
            })
        
        # Crear nuevo recorrido
        recorrido = Recorrido.objects.create(
            nombre=f"Recorrido personalizado - {request.user.username}",
            descripcion="Recorrido creado por el chatbot basado en tus preferencias",
            duracion_estimada=120,  # 2 horas estimadas
            distancia_total=5.0,    # 5 km estimados
        )
        
        # Agregar cafeter√≠as al recorrido
        for i, cafeteria_id in enumerate(cafeterias_ids, 1):
            cafeteria = Cafeteria.objects.get(id=cafeteria_id)
            recorrido.cafeterias.add(cafeteria, through_defaults={'orden': i})
        
        return JsonResponse({
            'success': True,
            'recorrido_id': recorrido.id,
            'mensaje': 'Recorrido creado exitosamente'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': 'Error al crear el recorrido'
        }, status=500)


@login_required
def nueva_conversacion(request):
    """Iniciar nueva conversaci√≥n"""
    # Desactivar conversaciones anteriores
    Conversacion.objects.filter(
        usuario=request.user,
        activa=True
    ).update(activa=False)
    
    # Crear nueva conversaci√≥n
    conversacion = Conversacion.objects.create(
        usuario=request.user,
        activa=True
    )
    
    return JsonResponse({
        'success': True,
        'conversacion_id': conversacion.id
    })


@csrf_exempt
@require_http_methods(["POST"])
def generar_audio(request):
    """Generar audio usando Amazon Polly"""
    try:
        data = json.loads(request.body)
        text = data.get('text', '').strip()
        voice_id = data.get('voice_id', settings.POLLY_VOICE_ID)
        
        if not text:
            return JsonResponse({'error': 'Texto vac√≠o'}, status=400)
        
        # Generar audio con Amazon Polly
        audio_base64 = voice_service.text_to_speech(text, voice_id)
        
        if audio_base64:
                return JsonResponse({
                    'success': True,
                    'audio': audio_base64,
                    'format': 'mp3',
                    'voice_used': voice_id
                })
        else:
            return JsonResponse({
                'success': False,
                'error': 'No se pudo generar el audio. Usando voz del navegador.'
            })
            
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Error generando audio: {str(e)}'
        }, status=500)


def obtener_voces(request):
    """Obtener voces disponibles de Amazon Polly"""
    try:
        voices = voice_service.get_available_voices()
        return JsonResponse({
            'success': True,
            'voices': voices,
            'polly_available': voice_service.is_available()
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Error obteniendo voces: {str(e)}'
        }, status=500)
