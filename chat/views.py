from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json
import openai
from django.conf import settings
from .models import Conversacion, Mensaje, PreferenciaUsuario
from core.models import Cafeteria, TipoCafe, Recorrido
from core.voice_service import voice_service
import random


def get_openai_response(user_message, conversacion):
    """Obtener respuesta del chatbot usando OpenAI o respuestas predefinidas"""
    try:
        # Verificar que la API key est√© configurada
        if not settings.OPENAI_API_KEY or settings.OPENAI_API_KEY == 'sk-proj-tu-clave-aqui':
            return get_fallback_response(user_message, conversacion)
        
        # Construir contexto de la conversaci√≥n
        mensajes_anteriores = conversacion.mensajes.all().order_by('timestamp')[:10]
        
        messages = [
            {
                "role": "system", 
                "content": """Eres un asistente virtual especializado en cafeter√≠as de Sucre, Bolivia. 
                Tu funci√≥n principal es ayudar a los usuarios a crear rutas personalizadas de exactamente 4 cafeter√≠as 
                basadas en sus preferencias de caf√© y ubicaci√≥n.
                
                Tipos de caf√© disponibles en Sucre:
                - Americano: Caf√© negro fuerte y simple
                - Espresso: Caf√© concentrado y intenso
                - Cappuccino: Caf√© con leche espumosa
                - Latte: Caf√© con mucha leche cremosa
                - Mocha: Caf√© con chocolate
                - Frapp√©: Caf√© fr√≠o batido
                - Macchiato: Espresso con un toque de leche
                - Cortado: Caf√© con un poco de leche
                
                Proceso:
                1. Pregunta qu√© tipo de caf√© prefiere el usuario
                2. Bas√°ndote en su respuesta, selecciona 4 cafeter√≠as de Sucre
                3. Explica por qu√© elegiste esas cafeter√≠as
                4. Menciona que se crear√° una ruta optimizada en el mapa
                
                S√© amigable, conversacional y enf√≥cate en crear la mejor experiencia de caf√© en Sucre."""
            }
        ]
        
        # Agregar mensajes anteriores
        for msg in mensajes_anteriores:
            role = "user" if msg.tipo == "U" else "assistant"
            messages.append({"role": role, "content": msg.contenido})
        
        # Agregar el mensaje actual
        messages.append({"role": "user", "content": user_message})
        
        # Llamar a OpenAI
        client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        print(f"Error en OpenAI: {str(e)}")  # Para debugging
        # Si hay error de cuota o conexi√≥n, usar respuestas predefinidas
        return get_fallback_response(user_message, conversacion)


def get_fallback_response(user_message, conversacion):
    """Respuestas predefinidas cuando OpenAI no est√° disponible"""
    mensaje_lower = user_message.lower()
    
    # Saludos
    if any(palabra in mensaje_lower for palabra in ['hola', 'hi', 'buenos', 'buenas']):
        return """¬°Hola! üëã Soy tu asistente virtual de cafeter√≠as de Sucre. 

Te ayudo a crear una ruta personalizada de 4 cafeter√≠as basada en tus preferencias de caf√©. 

¬øQu√© tipo de caf√© te gustar√≠a probar? Puedes elegir entre:
‚Ä¢ ‚òï Americano - Caf√© negro fuerte y simple
‚Ä¢ ‚òï Espresso - Caf√© concentrado e intenso  
‚Ä¢ ‚òï Cappuccino - Caf√© con leche espumosa
‚Ä¢ ‚òï Latte - Caf√© con mucha leche cremosa
‚Ä¢ ‚òï Mocha - Caf√© con chocolate
‚Ä¢ ‚òï Frapp√© - Caf√© fr√≠o batido
‚Ä¢ ‚òï Macchiato - Espresso con un toque de leche
‚Ä¢ ‚òï Cortado - Caf√© con un poco de leche

¬°Dime cu√°l prefieres y te creo la ruta perfecta! üó∫Ô∏è"""
    
    # Tipos de caf√©
    elif any(palabra in mensaje_lower for palabra in ['americano', 'negro', 'fuerte']):
        return """¬°Excelente elecci√≥n! ‚òï El americano es perfecto para los amantes del caf√© puro.

Te recomiendo estas 4 cafeter√≠as en Sucre que preparan un americano excepcional:

1. **Caf√© Sucre** - Calle Aniceto Arce 25
   ‚≠ê 4.8/5 - Especialistas en caf√© de origen boliviano

2. **Caf√© del Mundo** - Plaza 25 de Mayo
   ‚≠ê 4.6/5 - Ambiente cl√°sico, americano perfecto

3. **Caf√© Colonial** - Calle Potos√≠ 45
   ‚≠ê 4.7/5 - Tradici√≥n y calidad en cada taza

4. **Caf√© Aroma** - Calle Espa√±a 78
   ‚≠ê 4.5/5 - Granos tostados localmente

¬°Se crear√° tu ruta optimizada en el mapa! üó∫Ô∏è"""
    
    elif any(palabra in mensaje_lower for palabra in ['espresso', 'intenso', 'concentrado']):
        return """¬°Perfecto! ‚òï El espresso es para los verdaderos conocedores.

Estas son las 4 mejores cafeter√≠as para un espresso perfecto en Sucre:

1. **Caf√© Barista** - Calle Jun√≠n 32
   ‚≠ê 4.9/5 - Maestros del espresso, m√°quinas profesionales

2. **Caf√© Ritual** - Plaza San Francisco
   ‚≠ê 4.8/5 - T√©cnica italiana tradicional

3. **Caf√© Artesanal** - Calle Ayacucho 56
   ‚≠ê 4.7/5 - Granos seleccionados, tostado perfecto

4. **Caf√© Premium** - Calle Bol√≠var 89
   ‚≠ê 4.6/5 - Ambiente moderno, espresso de calidad

¬°Tu ruta de espresso est√° lista! üó∫Ô∏è"""
    
    elif any(palabra in mensaje_lower for palabra in ['cappuccino', 'capuchino', 'leche']):
        return """¬°Delicioso! ‚òï El cappuccino es perfecto para una experiencia cremosa.

Te recomiendo estas 4 cafeter√≠as que dominan el arte del cappuccino:

1. **Caf√© Latte** - Calle Aniceto Arce 15
   ‚≠ê 4.8/5 - Espuma perfecta, leche de calidad

2. **Caf√© Milano** - Plaza 25 de Mayo
   ‚≠ê 4.7/5 - T√©cnica italiana aut√©ntica

3. **Caf√© Crema** - Calle Potos√≠ 67
   ‚≠ê 4.6/5 - Arte latte, presentaci√≥n espectacular

4. **Caf√© Dulce** - Calle Espa√±a 23
   ‚≠ê 4.5/5 - Ambiente acogedor, cappuccino suave

¬°Se crear√° tu ruta de cappuccino en el mapa! üó∫Ô∏è"""
    
    elif any(palabra in mensaje_lower for palabra in ['latte', 'leche', 'cremoso']):
        return """¬°Excelente! ‚òï El latte es perfecto para una experiencia suave y cremosa.

Estas son las 4 mejores cafeter√≠as para latte en Sucre:

1. **Caf√© Latte Art** - Calle Jun√≠n 45
   ‚≠ê 4.9/5 - Arte latte espectacular, leche perfecta

2. **Caf√© Suave** - Plaza San Francisco
   ‚≠ê 4.8/5 - Latte cremoso, ambiente relajante

3. **Caf√© Leche** - Calle Ayacucho 34
   ‚≠ê 4.7/5 - Proporci√≥n perfecta caf√©-leche

4. **Caf√© Aroma** - Calle Bol√≠var 12
   ‚≠ê 4.6/5 - Latte tradicional, sabor aut√©ntico

¬°Tu ruta de latte est√° lista! üó∫Ô∏è"""
    
    elif any(palabra in mensaje_lower for palabra in ['mocha', 'chocolate', 'dulce']):
        return """¬°Perfecto! ‚òï El mocha es ideal para los amantes del chocolate.

Te recomiendo estas 4 cafeter√≠as que preparan mocha excepcional:

1. **Caf√© Chocolate** - Calle Aniceto Arce 78
   ‚≠ê 4.8/5 - Chocolate artesanal, mocha perfecto

2. **Caf√© Dulce** - Plaza 25 de Mayo
   ‚≠ê 4.7/5 - Balance perfecto caf√©-chocolate

3. **Caf√© Mocha** - Calle Potos√≠ 23
   ‚≠ê 4.6/5 - Receta tradicional, sabor aut√©ntico

4. **Caf√© Aroma** - Calle Espa√±a 56
   ‚≠ê 4.5/5 - Chocolate premium, mocha suave

¬°Se crear√° tu ruta de mocha en el mapa! üó∫Ô∏è"""
    
    # Respuesta por defecto
    else:
        return """¬°Hola! üëã Soy tu asistente virtual de cafeter√≠as de Sucre.

Te ayudo a crear una ruta personalizada de 4 cafeter√≠as. 

¬øQu√© tipo de caf√© te gustar√≠a probar? Puedes elegir entre:
‚Ä¢ ‚òï Americano - Caf√© negro fuerte
‚Ä¢ ‚òï Espresso - Caf√© concentrado  
‚Ä¢ ‚òï Cappuccino - Caf√© con leche espumosa
‚Ä¢ ‚òï Latte - Caf√© con mucha leche
‚Ä¢ ‚òï Mocha - Caf√© con chocolate
‚Ä¢ ‚òï Frapp√© - Caf√© fr√≠o batido
‚Ä¢ ‚òï Macchiato - Espresso con leche
‚Ä¢ ‚òï Cortado - Caf√© con poca leche

¬°Dime cu√°l prefieres y te creo la ruta perfecta! üó∫Ô∏è"""


def get_cafeterias_recomendadas(preferencias_texto):
    """Obtener cafeter√≠as recomendadas basadas en las preferencias"""
    # Esta es una implementaci√≥n simple. En producci√≥n, usar√≠as NLP m√°s avanzado
    cafeterias = Cafeteria.objects.all()
    
    # Filtrar basado en palabras clave en las preferencias
    preferencias_lower = preferencias_texto.lower()
    
    if 'americano' in preferencias_lower or 'negro' in preferencias_lower:
        # Buscar cafeter√≠as con buen americano
        cafeterias = cafeterias.filter(nombre__icontains='cafe')
    elif 'espresso' in preferencias_lower or 'intenso' in preferencias_lower:
        # Buscar cafeter√≠as especializadas
        cafeterias = cafeterias.filter(calificacion_promedio__gte=4.0)
    elif 'cappuccino' in preferencias_lower or 'leche' in preferencias_lower:
        # Buscar cafeter√≠as con buena leche
        cafeterias = cafeterias.filter(total_me_gusta__gte=5)
    
    # Seleccionar 4 cafeter√≠as aleatorias
    cafeterias_list = list(cafeterias)
    if len(cafeterias_list) >= 4:
        return random.sample(cafeterias_list, 4)
    else:
        return cafeterias_list


@login_required
def chat_view(request):
    """Vista principal del chat"""
    # Obtener o crear conversaci√≥n activa
    conversacion, created = Conversacion.objects.get_or_create(
        usuario=request.user,
        activa=True,
        defaults={'activa': True}
    )
    
    # Si hay m√∫ltiples conversaciones activas, desactivar las anteriores
    Conversacion.objects.filter(
        usuario=request.user,
        activa=True
    ).exclude(id=conversacion.id).update(activa=False)
    
    mensajes = conversacion.mensajes.all().order_by('timestamp')
    
    context = {
        'conversacion': conversacion,
        'mensajes': mensajes,
    }
    return render(request, 'chat/chat.html', context)


@login_required
@csrf_exempt
@require_http_methods(["POST"])
def enviar_mensaje(request):
    """Enviar mensaje al chatbot"""
    try:
        data = json.loads(request.body)
        mensaje_usuario = data.get('mensaje', '').strip()
        
        if not mensaje_usuario:
            return JsonResponse({'error': 'Mensaje vac√≠o'}, status=400)
        
        # Obtener conversaci√≥n activa
        conversacion = Conversacion.objects.filter(
            usuario=request.user,
            activa=True
        ).first()
        
        if not conversacion:
            conversacion = Conversacion.objects.create(
                usuario=request.user,
                activa=True
            )
        
        # Guardar mensaje del usuario
        mensaje_user = Mensaje.objects.create(
            conversacion=conversacion,
            tipo='U',
            contenido=mensaje_usuario
        )
        
        # Obtener respuesta del chatbot
        respuesta_bot = get_openai_response(mensaje_usuario, conversacion)
        
        # Guardar respuesta del bot
        mensaje_bot = Mensaje.objects.create(
            conversacion=conversacion,
            tipo='B',
            contenido=respuesta_bot
        )
        
        # Verificar si el bot est√° recomendando cafeter√≠as
        if 'recorrido' in respuesta_bot.lower() or 'cafeter√≠a' in respuesta_bot.lower():
            # Obtener cafeter√≠as recomendadas
            cafeterias_recomendadas = get_cafeterias_recomendadas(mensaje_usuario)
            
            return JsonResponse({
                'success': True,
                'mensaje_bot': respuesta_bot,
                'cafeterias_recomendadas': [
                    {
                        'id': cafe.id,
                        'nombre': cafe.nombre,
                        'direccion': cafe.direccion,
                        'calificacion': float(cafe.calificacion_promedio),
                        'me_gusta': cafe.total_me_gusta,
                        'latitud': float(cafe.latitud),
                        'longitud': float(cafe.longitud),
                    }
                    for cafe in cafeterias_recomendadas
                ]
            })
        
        return JsonResponse({
            'success': True,
            'mensaje_bot': respuesta_bot,
            'cafeterias_recomendadas': []
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': 'Error al procesar el mensaje'
        }, status=500)


@login_required
@require_http_methods(["POST"])
def crear_recorrido_chat(request):
    """Crear recorrido basado en las recomendaciones del chat"""
    try:
        data = json.loads(request.body)
        cafeterias_ids = data.get('cafeterias_ids', [])
        
        if len(cafeterias_ids) != 4:
            return JsonResponse({
                'success': False,
                'error': 'Debe seleccionar exactamente 4 cafeter√≠as'
            })
        
        # Crear nuevo recorrido
        recorrido = Recorrido.objects.create(
            nombre=f"Recorrido personalizado - {request.user.username}",
            descripcion="Recorrido creado por el chatbot basado en tus preferencias",
            duracion_estimada=120,  # 2 horas estimadas
            distancia_total=5.0,    # 5 km estimados
        )
        
        # Agregar cafeter√≠as al recorrido
        for i, cafeteria_id in enumerate(cafeterias_ids, 1):
            cafeteria = Cafeteria.objects.get(id=cafeteria_id)
            recorrido.cafeterias.add(cafeteria, through_defaults={'orden': i})
        
        return JsonResponse({
            'success': True,
            'recorrido_id': recorrido.id,
            'mensaje': 'Recorrido creado exitosamente'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': 'Error al crear el recorrido'
        }, status=500)


@login_required
def nueva_conversacion(request):
    """Iniciar nueva conversaci√≥n"""
    # Desactivar conversaciones anteriores
    Conversacion.objects.filter(
        usuario=request.user,
        activa=True
    ).update(activa=False)
    
    # Crear nueva conversaci√≥n
    conversacion = Conversacion.objects.create(
        usuario=request.user,
        activa=True
    )
    
    return JsonResponse({
        'success': True,
        'conversacion_id': conversacion.id
    })


@csrf_exempt
@require_http_methods(["POST"])
def generar_audio(request):
    """Generar audio usando Amazon Polly"""
    try:
        data = json.loads(request.body)
        text = data.get('text', '').strip()
        voice_id = data.get('voice_id', settings.POLLY_VOICE_ID)
        
        if not text:
            return JsonResponse({'error': 'Texto vac√≠o'}, status=400)
        
        # Generar audio con Amazon Polly
        audio_base64 = voice_service.text_to_speech(text, voice_id)
        
        if audio_base64:
                return JsonResponse({
                    'success': True,
                    'audio': audio_base64,
                    'format': 'mp3',
                    'voice_used': voice_id
                })
        else:
            return JsonResponse({
                'success': False,
                'error': 'No se pudo generar el audio. Usando voz del navegador.'
            })
            
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Error generando audio: {str(e)}'
        }, status=500)


def obtener_voces(request):
    """Obtener voces disponibles de Amazon Polly"""
    try:
        voices = voice_service.get_available_voices()
        return JsonResponse({
            'success': True,
            'voices': voices,
            'polly_available': voice_service.is_available()
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Error obteniendo voces: {str(e)}'
        }, status=500)
